@page "/request-history"
@using Aspire_Worker_Queue_Cache.Web.Models
@using Aspire_Worker_Queue_Cache.Web.Services
@using Microsoft.AspNetCore.OutputCaching
@using RequestHistoryModel = Aspire_Worker_Queue_Cache.Web.Models.RequestHistory
@attribute [OutputCache(Duration = 10)]
@inject CosmosDbService CosmosDbService

<PageTitle>Request History</PageTitle>

<h1>Request History</h1>

<div class="container">
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Filter by User ID" @bind="userIdFilter" />
                <button class="btn btn-outline-primary" @onclick="ApplyFilter">Filter</button>
                @if (!string.IsNullOrEmpty(activeFilter))
                {
                    <button class="btn btn-outline-secondary" @onclick="ClearFilter">Clear</button>
                }
            </div>
        </div>
        <div class="col-md-6 text-end">
            <button class="btn btn-primary" @onclick="LoadHistory">Refresh History</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(activeFilter))
    {
        <div class="row mb-3">
            <div class="col">
                <div class="alert alert-info">
                    Showing results for User ID: <strong>@activeFilter</strong>
                </div>
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <h4>Error Loading History</h4>
            <p>@errorMessage</p>
            @if (isConnectionError)
            {
                <div class="mt-3">
                    <h5>Troubleshooting:</h5>
                    <ol>
                        <li>Ensure Azure Cosmos DB Emulator is running</li>
                        <li>Make sure the AppHost project is set as the startup project</li>
                        <li>Check that all Docker containers are running in the Aspire dashboard</li>
                        <li>Verify connection strings in appsettings.json</li>
                    </ol>
                </div>
            }
        </div>
    }
    else if (historyItems != null && historyItems.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>User ID</th>
                    <th>Request</th>
                    <th>Timestamp</th>
                    <th>Processed</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in historyItems)
                {
                    <tr>
                        <td>@item.UserId</td>
                        <td>@item.Request</td>
                        <td>@item.Timestamp.ToLocalTime()</td>
                        <td>
                            @if (item.ProcessedTimestamp.HasValue)
                            {
                                @item.ProcessedTimestamp.Value.ToLocalTime()
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </td>
                        <td>
                            <span class="badge bg-@GetStatusColor(item.Status)">@item.Status</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-info">
            No request history found.
        </div>
    }
</div>

@code {
    private IEnumerable<RequestHistoryModel>? historyItems;
    private bool isLoading = false;
    private string? errorMessage = null;
    private bool isConnectionError = false;
    private string userIdFilter = "";
    private string? activeFilter = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadHistory();
    }

    private async Task LoadHistory()
    {
        errorMessage = null;
        isConnectionError = false;
        isLoading = true;

        try
        {
            if (!string.IsNullOrEmpty(activeFilter))
            {
                // Get specific user's requests
                historyItems = await CosmosDbService.GetRequestHistoryByUserIdAsync(activeFilter);
            }
            else
            {
                // Get all requests
                historyItems = await CosmosDbService.GetAllRequestHistoryAsync();
            }
        }
        catch (ApplicationException ex) when (ex.Message.Contains("Failed to connect"))
        {
            errorMessage = ex.Message;
            isConnectionError = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading history: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilter()
    {
        if (!string.IsNullOrWhiteSpace(userIdFilter))
        {
            activeFilter = userIdFilter.Trim();
            await LoadHistory();
        }
    }

    private async Task ClearFilter()
    {
        userIdFilter = "";
        activeFilter = null;
        await LoadHistory();
    }

    private string GetStatusColor(string status) => status switch
    {
        "Completed" => "success",
        "Pending" => "warning",
        _ => "secondary"
    };
}
